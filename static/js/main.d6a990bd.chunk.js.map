{"version":3,"sources":["index.js"],"names":["Square","props","react__WEBPACK_IMPORTED_MODULE_7___default","a","createElement","className","onClick","style","backgroundColor","winningSquares","value","Board","i","_this","this","winningSquare","includes","squares","key","row","offset","totalCols","x","push","renderSquare","rows","y","totalRows","renderRow","React","Component","History","_useState","useState","_useState2","Object","C_Users_Fury_Wolf_Documents_DanielPlummer_Dev_apps_gameload_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","show","setShow","Fragment","react_bootstrap_Button__WEBPACK_IMPORTED_MODULE_9__","react_bootstrap_Offcanvas__WEBPACK_IMPORTED_MODULE_14__","onHide","Header","closeButton","Title","Body","react_bootstrap_ListGroup__WEBPACK_IMPORTED_MODULE_13__","moves","NewGame","_this2","C_Users_Fury_Wolf_Documents_DanielPlummer_Dev_apps_gameload_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","C_Users_Fury_Wolf_Documents_DanielPlummer_Dev_apps_gameload_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","C_Users_Fury_Wolf_Documents_DanielPlummer_Dev_apps_gameload_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","call","handleChange","event","setState","C_Users_Fury_Wolf_Documents_DanielPlummer_Dev_apps_gameload_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","target","name","parseInt","handleSwitch","state","connectFour","handleSubmit","preventDefault","win","cols","alert","handleNewGame","handleClose","_this3","react_bootstrap_Alert__WEBPACK_IMPORTED_MODULE_20__","variant","onClose","dismissible","Heading","react_bootstrap_Form__WEBPACK_IMPORTED_MODULE_19__","onSubmit","Group","controlId","Label","Control","required","type","onChange","min","Switch","id","label","Menu","_useState3","_useState4","react_bootstrap_Modal__WEBPACK_IMPORTED_MODULE_18__","newRows","newCols","newWin","Footer","Game","_this4","history","Array","fill","location","winAmount","stepNumber","xIsNext","newGrid","slice","current","length","calculateWinner","handleClick","concat","step","status","_this5","winner","map","move","col","calculateCol","calculateRow","calculateLocation","desc","Item","jumpTo","action","active","disabled","react_bootstrap_Stack__WEBPACK_IMPORTED_MODULE_17__","gap","react_bootstrap_Navbar__WEBPACK_IMPORTED_MODULE_16__","bg","sticky","react_bootstrap_Container__WEBPACK_IMPORTED_MODULE_10__","Brand","Toggle","aria-controls","Collapse","react_bootstrap_Nav__WEBPACK_IMPORTED_MODULE_15__","fluid","react_bootstrap_Row__WEBPACK_IMPORTED_MODULE_11__","react_bootstrap_Col__WEBPACK_IMPORTED_MODULE_12__","xs","index","winCheck","loopCheck","j","indexCheck","calculateIndex","rowCheck","Number","isInteger","Math","ceil","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.d6a990bd.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport Offcanvas from 'react-bootstrap/Offcanvas';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Stack from 'react-bootstrap/Stack';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <button className=\"square\" onClick={props.onClick} style={{backgroundColor: props.winningSquares ? '#ccc': ''}}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component {\r\n\trenderSquare(i) {\r\n\t\tlet winningSquare = this.props.winningSquares && this.props.winningSquares.includes(i) ? true : false;\r\n\t\treturn (\r\n\t\t\t<Square\r\n\t\t\t\tvalue={this.props.squares[i]}\r\n\t\t\t\tonClick={() => this.props.onClick(i)}\r\n\t\t\t\tkey={i}\r\n\t\t\t\twinningSquares={winningSquare}\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n\r\n\trenderRow(row){\r\n\t\tconst squares = [];\r\n\t\tconst offset = row * this.props.totalCols;\r\n\t\tfor(let x = 0; x < this.props.totalCols; x++){\r\n\t\t\tsquares.push(\r\n\t\t\t\tthis.renderSquare(x + offset)\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<div key={row} className=\"board-row\">{squares}</div>\r\n\t\t);\r\n\t}\r\n\t\r\n\trender() {\r\n\t\tconst rows = [];\r\n\t\tfor(let y = 0; y < this.props.totalRows; y++){\r\n\t\t\trows.push(\r\n\t\t\t\tthis.renderRow(y)\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<div>{rows}</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nfunction History(props) {\r\n\tconst [show, setShow] = useState(false);\r\n\tconst handleClose = () => setShow(false);\r\n\tconst handleShow = () => setShow(true);\r\n\t\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Button onClick={handleShow}>Show Move History</Button>\r\n\t\t\t<Offcanvas show={show} onHide={handleClose}>\r\n\t\t\t\t<Offcanvas.Header closeButton>\r\n\t\t\t\t\t<Offcanvas.Title>Move History</Offcanvas.Title>\r\n\t\t\t\t</Offcanvas.Header>\r\n\t\t\t\t<Offcanvas.Body>\r\n\t\t\t\t\t<ListGroup>{props.moves}</ListGroup>\r\n\t\t\t\t</Offcanvas.Body>\r\n\t\t\t</Offcanvas>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nclass NewGame extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tcols: '',\r\n\t\t\trows: '',\r\n\t\t\twin: '' ,\r\n\t\t\tconnectFour: false,\r\n\t\t\talert: null\r\n\t\t};\r\n\t}\r\n\t\r\n\thandleChange = (event) => {\r\n\t\tthis.setState({\r\n\t\t\t[event.target.name]: parseInt(event.target.value)\r\n\t\t})\r\n\t}\r\n\t\r\n\thandleSwitch = (event) => {\r\n\t\tthis.setState({\r\n\t\t\t[event.target.name]: !this.state.connectFour\r\n\t\t})\r\n\t}\r\n\t\r\n\thandleSubmit = (event) => {\r\n\t\tevent.preventDefault();\r\n\t\tif(this.state.win > this.state.cols && this.state.win > this.state.rows){\r\n\t\t\tthis.setState({\r\n\t\t\t\talert: \"The winning amount cannot be greater than both the number of columns and the number of rows.\"\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\tthis.props.handleNewGame(this.state.rows,this.state.cols,this.state.win,this.state.connectFour);\r\n\t\t\tthis.props.handleClose();\r\n\t\t}\r\n\t}\r\n\t\r\n\trender(){\r\n\t\tconst alert = () => {\r\n\t\t\tif(this.state.alert){\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Alert \r\n\t\t\t\t\t\tvariant=\"danger\" \r\n\t\t\t\t\t\tonClose={() => this.setState({\r\n\t\t\t\t\t\t\talert: null\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t\tdismissible\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t<Alert.Heading>Invalid Game State</Alert.Heading>\r\n\t\t\t\t\t\t<p>{this.state.alert}</p>\r\n\t\t\t\t\t</Alert>\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t{alert()}\r\n\t\t\t\t<Form onSubmit={this.handleSubmit}>\r\n\t\t\t\t\t<Form.Group className=\"mb-3\" controlId=\"cols\">\r\n\t\t\t\t\t\t<Form.Label>Columns:</Form.Label>\r\n\t\t\t\t\t\t<Form.Control required type=\"number\" name=\"cols\" value={this.state.cols} onChange={this.handleChange} min=\"1\" />\r\n\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t<Form.Group className=\"mb-3\" controlId=\"rows\">\r\n\t\t\t\t\t\t<Form.Label>Rows:</Form.Label>\r\n\t\t\t\t\t\t<Form.Control required type=\"number\" name=\"rows\" value={this.state.rows} onChange={this.handleChange} min=\"1\" />\r\n\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t<Form.Group className=\"mb-3\" controlId=\"win\">\r\n\t\t\t\t\t\t<Form.Label>Winning Amount:</Form.Label>\r\n\t\t\t\t\t\t<Form.Control required type=\"number\" name=\"win\" value={this.state.win} onChange={this.handleChange} min=\"1\" />\r\n\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t<Form.Group className=\"mb-3\" controlId=\"connectFour\">\r\n\t\t\t\t\t\t<Form.Switch\r\n\t\t\t\t\t\t\tid=\"connectFour\"\r\n\t\t\t\t\t\t\tname=\"connectFour\"\r\n\t\t\t\t\t\t\tlabel=\"Enable Connect4\"\r\n\t\t\t\t\t\t\tonChange={this.handleSwitch}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t</Form.Switch>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t<Button variant=\"primary\" type=\"submit\">\r\n\t\t\t\t\t\tNew Game\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Form>\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nfunction Menu(props) {\r\n\tconst [show,setShow] = useState(true);\r\n\tconst handleClose = () => setShow(false);\r\n\tconst handleShow = () => setShow(true);\r\n\t\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Button onClick={handleShow}>New Game</Button>\r\n\t\t\t<Modal show={show} onHide={handleClose}>\r\n\t\t\t\t<Modal.Header closeButton>\r\n\t\t\t\t\t<Modal.Title>New Game</Modal.Title>\r\n\t\t\t\t</Modal.Header>\r\n\t\t\t\t<Modal.Body>\r\n\t\t\t\t\t<NewGame\r\n\t\t\t\t\t\thandleNewGame={(newRows,newCols,newWin,connectFour) => props.handleNewGame(newRows,newCols,newWin,connectFour)}\r\n\t\t\t\t\t\thandleClose={handleClose}\r\n\t\t\t\t\t></NewGame>\t\t\t\t\t\r\n\t\t\t\t</Modal.Body>\r\n\t\t\t\t<Modal.Footer>\r\n\t\t\t\t\t<Button variant=\"secondary\" onClick={handleClose}>\r\n\t\t\t\t\t\tClose\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</Modal.Footer>\r\n\t\t\t</Modal>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [\r\n        {\r\n          squares: Array(42).fill(null),\r\n\t\t  location: 0\r\n        }\r\n      ],\r\n\t  totalRows: 6,\r\n\t  totalCols: 7,\r\n\t  winAmount: 4,\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n\t  connectFour: true\r\n    };\r\n  }\r\n\r\n\thandleNewGame(newRows,newCols,newWin,connectFour) {\r\n\t\tconst newGrid = newRows * newCols;\r\n\t\tthis.setState({\r\n\t\t\thistory: [\r\n\t\t\t\t{\r\n\t\t\t\t\tsquares: Array(newGrid).fill(null),\r\n\t\t\t\t\tlocation: 0\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\ttotalRows: newRows,\r\n\t\t\ttotalCols: newCols,\r\n\t\t\twinAmount: newWin,\r\n\t\t\tstepNumber: 0,\r\n\t\t\txIsNext: true,\r\n\t\t\tconnectFour: connectFour\r\n\t\t});\r\n\t}\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n\tconst location = current.location;\r\n    if (calculateWinner(location,squares,this.state.winAmount,this.state.totalCols) || squares[i]) {\r\n      return;\r\n    }\r\n\t\r\n\t// CONNECT4 SETTING\r\n\tif(this.state.connectFour){\r\n\t\tif (squares[i+this.state.totalCols] === null) {\r\n\t\t\tthis.handleClick(i+this.state.totalCols);\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\t\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n    this.setState({\r\n      history: history.concat([\r\n        {\r\n          squares: squares,\r\n\t\t  location: i\r\n        }\r\n      ]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext\r\n    });\r\n  }\r\n  \r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: (step % 2) === 0\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n    const winner = calculateWinner(current.location,current.squares,this.state.winAmount,this.state.totalCols);\r\n\t\r\n\tconst moves = history.map((step, move) => {\r\n\t\tconst location = calculateLocation(step.location,this.state.totalCols);\r\n\t\tconst desc = move ?\r\n\t\t\t'Go to move #' + move + ' ' + location:\r\n\t\t\t'Go to game start';\r\n\t\tif(this.state.stepNumber === move){\r\n\t\t\treturn (\r\n\t\t\t\t<ListGroup.Item key={move} onClick={() => this.jumpTo(move)} action active disabled>{desc}</ListGroup.Item>\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\treturn (\r\n\t\t\t\t<ListGroup.Item key={move} onClick={() => this.jumpTo(move)} action>{desc}</ListGroup.Item>\r\n\t\t\t);\r\n\t\t}\r\n\t});\r\n\r\n    let status;\r\n    if (winner) {\r\n      status = \"Winner: \" + winner.winner;\r\n    } else {\r\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n    }\r\n\r\n\treturn (\r\n\t\t<Stack gap={4}>\r\n\t\t\t<Navbar bg=\"dark\" variant=\"dark\" sticky=\"top\">\r\n\t\t\t\t<Container>\r\n\t\t\t\t\t<Navbar.Brand>Game App</Navbar.Brand>\r\n\t\t\t\t\t<Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n\t\t\t\t\t<Navbar.Collapse id=\"basic-navbar-nav\">\r\n\t\t\t\t\t\t<Nav className=\"justify-content-end flex-grow-1 pe-3\">\r\n\t\t\t\t\t\t\t<Menu \r\n\t\t\t\t\t\t\t\thandleNewGame={(newRows,newCols,newWin,connectFour) => this.handleNewGame(newRows,newCols,newWin,connectFour)}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Nav>\r\n\t\t\t\t\t</Navbar.Collapse>\r\n\t\t\t\t</Container>\r\n\t\t\t</Navbar>\r\n\t\t\t<Stack gap={3}>\r\n\t\t\t\t<Container fluid=\"md\">\r\n\t\t\t\t\t<Row className=\"justify-content-center\">\r\n\t\t\t\t\t\t<Col xs=\"auto\">\r\n\t\t\t\t\t\t\t<div><h2>{status}</h2></div>\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t</Row>\r\n\t\t\t\t</Container>\r\n\t\t\t\t<Container fluid=\"md\">\r\n\t\t\t\t\t<Row className=\"justify-content-center\">\r\n\t\t\t\t\t\t<Col className=\"game-board\" xs=\"auto\">\r\n\t\t\t\t\t\t\t<Board\r\n\t\t\t\t\t\t\t\tsquares={current.squares}\r\n\t\t\t\t\t\t\t\tonClick={i => this.handleClick(i)}\r\n\t\t\t\t\t\t\t\ttotalRows={this.state.totalRows}\r\n\t\t\t\t\t\t\t\ttotalCols={this.state.totalCols}\r\n\t\t\t\t\t\t\t\twinningSquares={winner && winner.winningSquares}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t</Row>\r\n\t\t\t\t</Container>\r\n\t\t\t\t<Container fluid=\"md\">\r\n\t\t\t\t\t<Row className=\"justify-content-center\">\r\n\t\t\t\t\t\t<Col xs=\"auto\">\r\n\t\t\t\t\t\t\t<History\r\n\t\t\t\t\t\t\t\tmoves={moves}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t</Row>\r\n\t\t\t\t</Container>\r\n\t\t\t</Stack>\r\n\t\t</Stack>\r\n    );\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\nroot.render(<Game />);\r\n\r\nfunction calculateWinner(location,squares,winAmount,totalCols){\r\n\tconst index = location;\r\n\tconst col = calculateCol(index,totalCols);\r\n\tconst row = calculateRow(index,totalCols);\r\n\t// The total number of possible win states on each axis is equal to the amount of squares required to win. Thus, we need to check in each direction of the current square, up to the number of possible win states minus one.\r\n\tconst winCheck = winAmount - 1;\r\n\tvar winningSquares = [];\r\n\t\r\n\t// We have 2 loops to check for all possible win states per axis. The first loop sets the starting point of where to check during the second loop. \r\n\t//For example, if we need to check for 3 win states, X-2 to X, X-1 to X+1, X to X+2, we set our recursive i variable to be 2 (3 win states minus one). Then, we set the top value we need to check to equal to i minus the winCheck, which will be 0 in this example. On our second loop through, i will be 1, which means our loop check will be -1. Like this, we can check the full range of each win state. \r\n\t// The second loop is equal to i, which means that we start at X - 2 (if there are 3 win states), if X-2 to X doesn't contain a winning state, then we break out of this loop. Then i wil then be 1, which means the second loop starts at X-1 and goes to X+1. \r\n\t// For any of these win state checks that check along the X axis, we need to put in a preliminary check for if the Y axis is different for the index that we check. For example, in a grid of 5x5 and a win state of 3, if we check square[5], which will be row 2, col 1, there obviously cannot be a winning state at col minus two, as this will be out of the grid. However, due to the nature of our grid, the square with the index of col minus two will actually be square[3] on row 1, col 4. If this square has the same value, this will cause a false win. To stop this, we put in a check to see if the row of the square we just clicked is the same as the row of the square we're checking. If they're different, we know this particular win state cannot work.\r\n\t\r\n\t// This checks the X axis for win states.\r\n\tfor(let i = winCheck; i >= 0; i--){\r\n\t\tlet loopCheck = i - winCheck;\r\n\t\twinningSquares = [];\r\n\t\tfor(let j = i; j >= loopCheck; j--){\r\n\t\t\tlet colCheck = col - j;\r\n\t\t\tlet indexCheck = calculateIndex(colCheck,row,totalCols);\r\n\t\t\tif(calculateRow(indexCheck,totalCols) === row){\r\n\t\t\t\tif(squares[index] && squares[index] === squares[indexCheck] && squares[indexCheck]){\r\n\t\t\t\t\twinningSquares.push(\r\n\t\t\t\t\t\tindexCheck\r\n\t\t\t\t\t);\r\n\t\t\t\t\tif(winningSquares.length === winAmount){\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\twinner: squares[index],\r\n\t\t\t\t\t\t\twinningSquares: winningSquares\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// This combination isn't winning because the value of the indexes we're checking are not equal. Empty the winningSquares array and break this loop.\r\n\t\t\t\t\twinningSquares = null;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// This combination isn't winning because the index we're checking is on another row. Empty the winningSquares array and break this loop.\r\n\t\t\t\twinningSquares = null;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t// This checks the Y axis for win states.\r\n\tfor(let i = winCheck; i >= 0; i--){\r\n\t\tlet loopCheck = i - winCheck;\r\n\t\twinningSquares = [];\r\n\t\tfor(let j = i; j >= loopCheck; j--){\r\n\t\t\tlet rowCheck = row - j;\r\n\t\t\tlet indexCheck = calculateIndex(col,rowCheck,totalCols);\r\n\t\t\tif(squares[index] && squares[index] === squares[indexCheck] && squares[indexCheck]){\r\n\t\t\t\twinningSquares.push(\r\n\t\t\t\t\tindexCheck\r\n\t\t\t\t);\r\n\t\t\t\tif(winningSquares.length === winAmount){\r\n\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\twinner: squares[index],\r\n\t\t\t\t\t\twinningSquares: winningSquares\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// This combination isn't winning because the value of the indexes we're checking are not equal. Empty the winningSquares array and break this loop.\r\n\t\t\t\twinningSquares = null;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t// This checks the NW-SE diagonal for win states.\r\n\tfor(let i = winCheck; i >= 0; i--){\r\n\t\tlet loopCheck = i - winCheck;\r\n\t\twinningSquares = [];\r\n\t\tfor(let j = i; j >= loopCheck; j--){\r\n\t\t\tlet rowCheck = row - j;\r\n\t\t\tlet colCheck = col - j;\r\n\t\t\tlet indexCheck = calculateIndex(colCheck,rowCheck,totalCols);\r\n\t\t\tif(calculateRow(indexCheck,totalCols) === rowCheck){\r\n\t\t\t\tif(squares[index] && squares[index] === squares[indexCheck] && squares[indexCheck]){\r\n\t\t\t\t\twinningSquares.push(\r\n\t\t\t\t\t\tindexCheck\r\n\t\t\t\t\t);\r\n\t\t\t\t\tif(winningSquares.length === winAmount){\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\twinner: squares[index],\r\n\t\t\t\t\t\t\twinningSquares: winningSquares\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// This combination isn't winning because the value of the indexes we're checking are not equal. Empty the winningSquares array and break this loop.\r\n\t\t\t\t\twinningSquares = null;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// This combination isn't winning because the index we're checking is on another row. Empty the winningSquares array and break this loop.\r\n\t\t\t\twinningSquares = null;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\t// This checks the SW-NE diagonal for win states.\r\n\tfor(let i = winCheck; i >= 0; i--){\r\n\t\tlet loopCheck = i - winCheck;\r\n\t\twinningSquares = [];\r\n\t\tfor(let j = i; j >= loopCheck; j--){\r\n\t\t\tlet rowCheck = row - j;\r\n\t\t\tlet colCheck = col + j;\r\n\t\t\tlet indexCheck = calculateIndex(colCheck,rowCheck,totalCols);\r\n\t\t\tif(calculateRow(indexCheck,totalCols) === rowCheck){\r\n\t\t\t\tif(squares[index] && squares[index] === squares[indexCheck] && squares[indexCheck]){\r\n\t\t\t\t\twinningSquares.push(\r\n\t\t\t\t\t\tindexCheck\r\n\t\t\t\t\t);\r\n\t\t\t\t\tif(winningSquares.length === winAmount){\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\twinner: squares[index],\r\n\t\t\t\t\t\t\twinningSquares: winningSquares\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// This combination isn't winning because the value of the indexes we're checking are not equal. Empty the winningSquares array and break this loop.\r\n\t\t\t\t\twinningSquares = null;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// This combination isn't winning because the index we're checking is on another row. Empty the winningSquares array and break this loop.\r\n\t\t\t\twinningSquares = null;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n}\r\n\r\nfunction calculateLocation(location,totalCols) {\r\n\tconst col = calculateCol(location,totalCols);\r\n\tconst row = calculateRow(location,totalCols);\r\n\treturn '(' + col + '), (' + row + ')';\r\n}\r\n\r\nfunction calculateCol(index,totalCols){\r\n\tconst col = index % totalCols + 1;\r\n\treturn col;\r\n}\r\n\r\nfunction calculateRow(index,totalCols){\r\n\tvar row = index / totalCols;\r\n\tif(Number.isInteger(row)){\r\n\t\trow = row + 1;\r\n\t} else {\r\n\t\trow = Math.ceil(row);\r\n\t}\r\n\treturn row;\r\n}\r\n\r\nfunction calculateIndex(col,row,totalCols){\r\n\tconst offset = (row - 1) * totalCols;\r\n\tconst index = col + offset - 1;\r\n\treturn index;\r\n}"],"sourceRoot":""}